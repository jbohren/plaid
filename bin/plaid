#!/usr/bin/env python3

import os
import sys
import argparse
import subprocess
import yaml


def get_ws_path():
    if 'PLAID_WS_PATH' not in os.environ:
        print('No $PLAID_WS_PATH defined. Please run `plaid source` with a ros2 workspace.')
        sys.exit(1)

    return os.environ['PLAID_WS_PATH']

def get_ws_data():
    ws_path = get_ws_path()
    plaid_ws_file_path = os.path.join(ws_path,'plaid.yml')

    if os.path.exists(plaid_ws_file_path):
        with open(plaid_ws_file_path,'r') as plaid_ws_file:
            plaid_ws_data = yaml.load(plaid_ws_file, yaml.FullLoader)
    else:
        plaid_ws_data = dict()

    return plaid_ws_data or dict()

def set_ws_data(data):
    ws_path = get_ws_path()
    plaid_ws_file_path = os.path.join(ws_path,'plaid.yml')

    with open(plaid_ws_file_path,'w+') as plaid_ws_file:
        yaml.dump(data, plaid_ws_file)


def cmd_nick(args):
    if args.nick_action == 'set':
        ws_data = get_ws_data()
        ws_data.setdefault('environment', dict()).setdefault('PLAID_PROMPT_PREFIX', '[{}] '.format(args.nickname))

        set_ws_data(ws_data)
    elif args.nick_action == 'prompt':
        print('export PS1="$PLAID_PROMPT_PREFIX$PS1"')

def cmd_source(args):
    if 'PLAID_WS_PATH' in os.environ:
        print('WARNING: $PLAID_WS_PATH already defined:\n{}'.format(os.environ['PLAID_WS_PATH']))

    shell_exe = os.environ.get('SHELL')

    if args.path:
        path = args.path
    else:
        path = os.getcwd()

    while len(path) > 1:
        install_setup_file = os.path.join(
                path,
                'install',
                'setup.bash')

        os.environ['PLAID_WS_PATH'] = path
        plaid_ws_data = get_ws_data()

        environ = dict(os.environ)
        environ['PLAID_WS_PATH'] = path
        environ.update(plaid_ws_data.get('environment',dict()))

        if os.path.exists(install_setup_file):
            print('####### PLAID #######')
            print(' - Loaded setup file:\n    {}'.format(install_setup_file))
            print(' - To prefix prompt: `eval $(plaid nick prompt)`')
            print(' - To exit: Ctrl-D')
            os.execve(
                shell_exe,
                [
                    'bash',
                    '-c',
                    'source {} && /bin/bash -l'.format(install_setup_file),
                    ],
                environ
                )
            return

        path, tail = os.path.split(path)

def cmd_ws(command, args):
    ws_path = get_ws_path()

    os.chdir(os.environ['PLAID_WS_PATH'])

    os.execvp(
            command,
            [command] + args)

def cmd_build(args):
    ws_path = get_ws_path()

    os.chdir(os.environ['PLAID_WS_PATH'])

    this_package = []
    if args.this:
        pass

    build_args = []
    if len(this_package + args.package) > 0:
        build_args = ['--packages-select'] + args.package + this_package

    os.execvp(
            'colcon',
            ['colcon', 'build'] + build_args )


def main():
    parser = argparse.ArgumentParser(
            description='Go faster.')

    subparsers = parser.add_subparsers(
            dest='subcommand',
            help='subcommands')
    sp_source = subparsers.add_parser(
            'source',
            help='Source a ros workspace and create a subshell.')
    sp_source.add_argument('path',
            nargs='?',
            default=None,
            help="The path to the workspace to be sourced. By default, source the closest enclosing workspace.")

    sp_ws = subparsers.add_parser(
            'ws',
            help='Run a command at the root of the workspace.')
    sp_ws.add_argument('command'
            )

    sp_build = subparsers.add_parser(
            'build',
            help='Build the workspace.')
    sp_build.add_argument('--this')
    sp_build.add_argument('package', nargs='*')

    sp_nick = subparsers.add_parser(
            'nick',
            help='Manage workspace nickname.')
    sp_nick_subparsers = sp_nick.add_subparsers(
            dest='nick_action',
            help='nick actions')
    sp_nick_set = sp_nick_subparsers.add_parser(
            'set',
            help='Set the workspace nickname.')
    sp_nick_set.add_argument('nickname',
            nargs='?')
    sp_nick_set = sp_nick_subparsers.add_parser(
            'prompt',
            help='Get a prompt command to be used with: eval $(plaid nick prompt)')

    args, unknown = parser.parse_known_args()

    if args.subcommand == 'source':
        cmd_source(args)
    elif args.subcommand == 'ws':
        cmd_ws(args.command, unknown)
    elif args.subcommand == 'nick':
        cmd_nick(args)
    elif args.subcommand == 'build':
        cmd_build(args)
    else:
        parser.print_help(sys.stderr)
        sys.exit(1)

if __name__ == '__main__':
    main()
